{"remainingRequest":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/src/components/ListItem.vue?vue&type=template&id=a2cd1efe&scoped=true&ts=true","dependencies":[{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/src/components/ListItem.vue","mtime":1642316095000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPCEtLQogICAgICAgIOatpOWkhOagt+W8j+aIkeS9v+eUqGNzcyBob3ZlcuadpeWBmgogICAgICAgIOinhumikeS4reiAgeW4iOeUqOWIsOeahOS4pOS4quaWueazlSBAbW91c2VlbnRlciBAbW91c2VsZWF2ZeWIhuWIq+S4uum8oOagh+i/m+WFpeWSjOemu+W8gOeahOWbnuiwgwogICAgLS0+CiAgPGxpIGNsYXNzPSJ0b2RvLWl0ZW0iPgogICAgPGRpdj4KICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiB2LW1vZGVsPSJpc0NvbXBsZXRlZCIgLz4KICAgICAgPHNwYW4+e3sgdG9kb2l0ZW0udGl0bGUgfX08L3NwYW4+CiAgICA8L2Rpdj4KICAgIDxidXR0b24gY2xhc3M9ImRlbEJ0biIgQGNsaWNrPSJkZWwoaW5kZXgpIj7liKDpmaQ8L2J1dHRvbj4KICA8L2xpPgo="},{"version":3,"sources":["/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/src/components/ListItem.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC;QACG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC;MACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvD,CAAC,CAAC,CAAC,CAAC","file":"/Users/lixin/iCloud Drive（归档）/Documents/code/vue3学习/vue3-project/src/components/ListItem.vue","sourceRoot":"","sourcesContent":["<template>\n  <!--\n        此处样式我使用css hover来做\n        视频中老师用到的两个方法 @mouseenter @mouseleave分别为鼠标进入和离开的回调\n    -->\n  <li class=\"todo-item\">\n    <div>\n      <input type=\"checkbox\" v-model=\"isCompleted\" />\n      <span>{{ todoitem.title }}</span>\n    </div>\n    <button class=\"delBtn\" @click=\"del(index)\">删除</button>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, watch } from \"vue\";\n// 引入接口\nimport { Todo } from \"@/types/todo\";\nexport default defineComponent({\n  name: \"ListItem\",\n  props: {\n    todoitem: {\n      //函数返回的是Todo类型\n      type: Object as () => Todo,\n      required: true,\n    },\n    index: {\n      type: Number,\n    },\n  },\n  setup(props, con) {\n    console.log(\"props\", props, con);\n    // // 当复选框选中时，所选事件下标索引将添加到selectedItemList中\n    // let selectedItemList = reactive([]);\n    // if (window.sessionStorage.getItem(\"selectedItemList\")) {\n    //   selectedItemList = JSON.parse(\n    //     window.sessionStorage.getItem(\"selectedItemList\") + \"\"\n    //   );\n    //   selectedItemList.push();\n    // }\n    const delTodo = inject(\"delTodo\");\n    const edit = inject(\"edit\");\n    const updateState = inject(\"updateState\");\n    const del = (index: number) => {\n      if (window.confirm(\"确认删除吗？\")) {\n        if (typeof delTodo === \"function\") delTodo(index);\n      }\n    };\n    // const updateState = (index: number) => {\n    //   if (window.confirm(\"确认删除吗？\")) {\n    //     if (typeof delTodo === \"function\") delTodo(index);\n    //   }\n    // };\n    // const isCompleted = computed(() => {\n    //   return props.todoitem.isCompleted;\n    // });\n    const isCompleted = computed({\n      get() {\n        return props.todoitem.isCompleted;\n      },\n      set(val) {\n        if (typeof updateState === \"function\") updateState(props.todoitem, val);\n      },\n    });\n    // const isCompleted = computed({\n    //   get() {\n    //     return props.todoitem.isCompleted;\n    //   },\n    //   set(val) {\n    //     if (typeof updateState === \"function\") updateState(props.todoitem, val);\n    //   },\n    // });\n    return {\n      isCompleted,\n      del,\n    };\n  },\n});\n</script>\n\n<style scoped>\n.todo-item {\n  border: 1px solid lightblue;\n  list-style: none;\n  width: 100%;\n  padding: 5px;\n  margin-left: -40px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n}\n.delBtn {\n  background-color: #e95b47;\n  color: #fff;\n  border-radius: 5px;\n  border: none;\n  display: none;\n}\n.todo-item:hover {\n  color: lightcoral;\n  background-color: rgba(137, 190, 78, 0.3);\n}\n.todo-item:hover .delBtn {\n  display: block;\n}\n</style>\n"]}]}